Pack ein paar Sachen in die Kiste hier, wir werden mit diesen Arbeiten.
Auf der Tafel siehst du ein einfaches Script, was den Inhalt einer Bestimmten Kiste anzeigt.

Der Befehl besteht aus 3 Teilen.
1. Befehl (#items)
2. Struktur (E.S.)
3. Gerät ('ListBox')

Damit sagen wir dem Script es soll alle 'Items' aus 'Entity.Structure' des Gerätes 'ListBox' anzeigen.
Danach wird, wie immer, der Befehl mit {{/befehl}} (hier {{/items}}) geschlossen.

Dazwischen siehst du Sachen wie:
* {{id}}
* {{count}}
* {{name}}
* {{i18n key}}
Dies sind Variablen die wir oft verwenden werden.

Für Abfragen (dazu später mehr), werdet ihr IMMER 'id' brauchen, ausser zum übersetzen mit 'i18n' wo 'key' zuverlässiger ist.

-------------------

Wenn ihr vorher einen 1000er (oder höher) Stapel reingelegt hat, super, ansonsten bitte jetzt machen.

Durch die Verwendung des 'format' Befehls, können wir die Variable die wir ausgeben formatieren.
Die 0 represäntiert den Hauptteil der Variable, wobei die Zahl nach dem Komma die Anzahl Stellen angiebt welche die Ausgabe nach rechts verschoben werden soll. (als Orientierungs 'hilfe').

Danach kommt der <color=red>(normalerweise) Optionale</color> Teil: ":N1", welcher die Ausgabe auf 1 Stelle nach dem Komma angibt.
Ändert dies auf ":N0" um ganz Zahlen (integer) mit 1000er Trennzeichen anzuzeigen.

--------------

Mit dem Befehl 'itemlist' könnt ihr eine Struktur (E.S.items) auf eine ID liste überprüfen.
Anstelle der effektiven IDs (z.B. '537,1234') könnt ihr auch wie dargestellt vorgefertigte ID listen abrufen.

Dies überprüft eine komplette Struktur, nicht nur spezifische Boxen.
Aber, dies prüft nur Boxen mit Eigennamen, also keine Standartnamen.

Das ganze ist in einen "scroll" Befehl gepackt, falls eine Liste länger ist, könnt ihr damit den gesamten Inhalt über scroll anzeigen lassen.
Die 1. Zahl gibt die anzahl Zeilen an, die Angezeigt werden können (z.B. 18 bei einem 1x1 LCD), die 2te Zahl wie oft (bzw. wie schnell) gescrollt werden soll.

Es wird immer 1 Zeile gescrollt, dieser Wert ist nicht veränderbar.

--------------------

Für den <color=red>Move</color> Befehl, starten wir mit einer einfachen <color=green>items</color> abfrage.
Aber anstelle der "normalen" Anzeige, haben wir den eigentlichen <color=red>Move</color>-Befehl.

Dieser besteht aus 3 Teilen:
1. Move
2. Was (<color=red>.</color>)
3. Ziel (@root.E.S. 'Kistenname')
4. <i>optional</i> Anzahl (z.B.: 100)

Bei Erfolg werden die nachfolgenden Zeilen ausgegeben, wie hier den <color=red>{{Count}}</color> und <color=red>{{i18n id}}</color>.
Wenn ihr nur "innerhalb" der aktuellen Struktur verschiebt, reichen die einfachen <color=yellow>{{Source}} / {{Destination}}</color> angaben.
Die jeweiligen <color=orange>{{*E.Name}}</color> variationen nutze ich nur (selten) bei verschiebungen auf andere Strukturen.

Wenn ihr jetzt eine <i>optionale</i> Anzahl angegeben habt, und dies erreicht wurde, könntet ihr mit einem <color=green>{{else}}</color> einen weiteren Move-Befehl starten um die Items in eine andere Kiste zu verschieben.
Dies könnte dann so aussehen:
<color=green>
{{items E.S. 'MoveInput'}}
	{{~#move . @root.E.S 'MoveOutput' 100}}
{{Count}} // {{i18n Id}} 
{{SourceE.Name}}::{{Source}} --> {{DestinationE.Name}}::{{Destination}}
===========
	{{else}}
		{{~#move . @root.E.S 'MoveOverfill'}}
{{Count}} // {{i18n Id}} 
{{SourceE.Name}}::{{Source}} --> {{DestinationE.Name}}::{{Destination}}
===========
		{{/move}}
	{{/move}}
{{/items}}
</color>